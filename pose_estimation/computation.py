# -*- coding: utf-8 -*-
"""Computation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eex1JatzkifIo3hDuW3aBr2QSN6HxSu5
"""

import csv
l=[]
with open('/content/drive/MyDrive/Pose_Estimation/Subject4567.csv', newline='') as file:
    reader = csv.reader(file)
    for i in reader:
        l.append(i)

from google.colab import drive
drive.mount('/content/drive')

p=len(l)
p

MAE=[0.04,0.05,0.05,0.06,0.06,0.16,0.16,0.15,0.15,0.14,0.14,0.18,0.18,0.12,0.12,0.07,0.07]
i1=0.0
for i in MAE:
  i1+=i**2
i1=i1*17

#This function is reponsible for calc. the movement between pairs of frames and thejn taking the average of all pairs which then represents movement of 1s
def process(l,l1):
  l_pair=[]
  l_new=[]
  if len(l)>1:
    # print(l)
    x=1
    while x<len(l)+1:
      sum=0.0
      for i in range(len(l)-1):
        if x-1<=int(l[i][0])<=x:
          l_pair.append(l[i])
      for i in range(1,18):
        sum+=(((eval(l[1][i])[0]-eval(l[0][i])[0])**2+(eval(l[1][i])[1]-eval(l[0][i])[1])**2)**0.5)*(MAE[i-1]**2/i1)
      l_new.append(sum)
      x+=1
      l_pair=[]
      sum=0.0
    sum1=0.0
    for i in range(len(l_new)):
      sum1+=l_new[i]
      length=len(l)-1
      y=round(sum1/length,6)
    l1.append(y)
    # print(*l1)

#We group every 10 frames together and send it to the process function for calc. the MI for that second
l_final=[]
l_process=[]
x=10
while x<6610:
  for i in range(1,p):
    if x-10<int(l[i][0])<=x:
      l_process.append(l[i])
  process(l_process,l_final)
  l_process=[]
  x+=10

len(l_final)



g=[{l_final.index(i)+1:i} for i in l_final if i>1.0]

len(g)

# g

# round(18.9038%1,6)

#Special case wherein when the value is above 1 we handle it differently considering the currentframe and n+1 and n-1
#Since the first and last frame do not have n-1 and n+1 respectively they are handled differently.
l_special=[]
n=len(l_final)-1
i=0
for i in range(n+1):
  if i==0 and l_final[0]>1:
    l_special.append([0,l_final[0],l_final[1]])
    i+=1
  elif i==n and l_final[len(l_final)-1]>1:
    l_special.append([len(l_final)-1,l_final[len(l_final)-1],l_final[len(l_final)-2]])
    break

l_special

l_round=[]
for i in range(1,len(l_final)-1):
  l1=[]
  if l_final[i]>1.0:
    l1.append(i)

    l1.append(l_final[i-1])
    l1.append(l_final[i])
    l1.append(l_final[i+1])

  if len(l1)>0:
    l_round.append(l1)

# l_round

for i in range(len(l_special)):
  # print(i)
  if l_special[i][2]>1:



    l_final[l_special[i][0]]=(round(l_special[i][1]%1,6)+round(l_special[i][2]%1,6))/2.0
  elif l_special[i][2]<1:

    l_final[l_special[i][0]]=round(l_special[i][1]%1,6)

l_final[len(l_final)-1]

for i in range(len(l_round)):
  # if len(i)==4:
  #   l_final[i[0]-1]=round((i[1]+i[2]+i[3])/3,6)
  # elif len(i)==3:
  #   l_final[i[0]-1]=round((i[1]+i[2])/2,6)
  # elif len(i)==2:
  #   l_final[i[0]-1]=(i[1])


# break
  if l_round[i][1]<1:
    if l_round[i][3]<1:
      l_final[l_round[i][0]]=round(l_round[i][2]%1,6)
    elif l_round[i][3]>1:
      k=(round(l_round[i][2]%1,6)+round(l_round[i][3]%1,6)+l_round[i][1])/3.0
      if k<0.5:
        l_final[l_round[i][0]]=0.5+k
      else:
        l_final[l_round[i][0]]=k
  else:
    if l_round[i][3]>1:
      l_final[l_round[i][0]]=1
    else:
      k=(round(l_round[i][2]%1,6)+round(l_round[i][1]%1,6)+l_round[i][3])/3.0
      if k<0.5:
        l_final[l_round[i][0]]=0.5+k
      else:
        l_final[l_round[i][0]]=k


  # l_final[l_round[i][0]]=1

# l_final

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

l_final_new=l_final[470:491]
time=[i+1 for i in range(469,490,1)]

len(l_final_new)

plt.plot(time,l_final_new)
plt.xlabel("Time")
plt.ylabel("Movement Index")
# plt.xlim(470,490)

inverse=[]
for i in l_final:
  inverse.append(1-i)
time=[i+1 for i in range(len(l_final))]

plt.plot(time,inverse)
plt.axhline(y=0.935, color='r', linestyle='-')

plt.xlabel("Time")
plt.ylabel("Movement Index")

import pandas as pd

df=pd.DataFrame(l_final)
df.to_csv('/content/drive/MyDrive/Pose_Estimation/Subject1204MI.csv', index=False)

MAE=[0.04,0.05,0.05,0.06,0.06,0.16,0.16,0.15,0.15,0.14,0.14,0.18,0.18,0.12,0.12,0.07,0.07]

import matplotlib.pyplot as plt

# Data for the x-axis (categories) and y-axis (values)
categories=['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17']
MAE=[0.04,0.05,0.05,0.06,0.06,0.16,0.16,0.15,0.15,0.14,0.14,0.18,0.18,0.12,0.12,0.07,0.07]
# Plotting the bar graph
plt.bar(categories, MAE)

# Adding labels and title
plt.xlabel('Keypoint Joint')
plt.ylabel('Weights')
plt.title('Relative Importance Score')

# Displaying the graph
plt.show()

